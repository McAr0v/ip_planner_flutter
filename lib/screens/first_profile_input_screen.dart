import 'dart:io';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:ip_planner_flutter/design/buttons/custom_button.dart';
import 'package:ip_planner_flutter/design/loading/loading_screen.dart';
import 'package:ip_planner_flutter/design/text_widgets/text_custom.dart';
import 'package:ip_planner_flutter/design/text_widgets/text_state.dart';
import '../design/app_colors.dart';
import '../design/images/image_in_edit_screen.dart';
import '../design/snackBars/custom_snack_bar.dart';
import '../image_picker/image_picker_service.dart';
import '../image_picker/image_uploader.dart';
import '../user/user_custom.dart';

class FirstProfileInputScreen extends StatefulWidget {

  final String name;
  final String email;
  final String uid;

  const FirstProfileInputScreen({
    required this.name,
    required this.email,
    required this.uid,
    super.key,
  });


  @override
  FirstProfileInputScreenState createState() => FirstProfileInputScreenState();

}

class FirstProfileInputScreenState extends State<FirstProfileInputScreen> {

  final ImagePickerService imagePickerService = ImagePickerService();
  final ImageUploader imageUploader = ImageUploader();
  final FirebaseAuth auth = FirebaseAuth.instance;

  final TextEditingController nameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();

  late TextEditingController imageController;

  bool loading = false;

  File? _imageFile;

  String defaultImage = 'https://firebasestorage.googleapis.com/v0/b/ipplanner-fdba7.appspot.com/o/avatar.png?alt=media&token=1a568db0-9462-404f-9d03-f9284ed9bc13';

  @override
  void initState() {

    if (widget.name != ""){
      nameController.text = widget.name;
    }

    imageController = TextEditingController(text: defaultImage);

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Stack (
          children: [
            if (loading) const LoadingScreen()

            else SingleChildScrollView(
              padding: const EdgeInsets.fromLTRB(20, 50, 20, 50),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [

                  // --- –ó–ê–ì–û–õ–û–í–û–ö –ò –ü–û–î–ü–ò–°–¨

                  const SizedBox(height: 25.0),

                  const TextCustom(text: "–ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å", textState: TextState.headlineBig, color: AppColors.yellowLight,),

                  const SizedBox(height: 15.0),

                  const TextCustom(text: "–î–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π", textState: TextState.bodyMedium),

                  const SizedBox(height: 25.0),

                  if (_imageFile != null) ImageInEditScreen(

                      backgroundImageFile: _imageFile,
                      onEditPressed: () => _pickImage()
                  )

                  else if (_imageFile == null) ImageInEditScreen(
                    onEditPressed: () => _pickImage(),
                    backgroundImageUrl: defaultImage,
                  ),

                  const SizedBox(height: 25.0),

                  TextField(
                    style: const TextStyle(
                      color: AppColors.white,
                      fontSize: 16,
                      fontFamily: 'sf_custom',
                      fontWeight: FontWeight.normal,
                    ),
                    controller: nameController,
                    decoration: const InputDecoration(
                      labelText: '–ò–º—è',
                    ),
                    keyboardType: TextInputType.text,
                  ),
                  const SizedBox(height: 16.0),

                  TextField(
                    style: const TextStyle(
                      color: AppColors.white,
                      fontSize: 16,
                      fontFamily: 'sf_custom',
                      fontWeight: FontWeight.normal,
                    ),
                    controller: lastNameController,
                    decoration: const InputDecoration(
                      labelText: '–§–∞–º–∏–ª–∏—è',
                    ),
                    keyboardType: TextInputType.text,
                  ),
                  const SizedBox(height: 16.0),

                  TextField(
                    style: const TextStyle(
                      color: AppColors.white,
                      fontSize: 16,
                      fontFamily: 'sf_custom',
                      fontWeight: FontWeight.normal,
                    ),
                    controller: phoneController,
                    decoration: const InputDecoration(
                      labelText: '–¢–µ–ª–µ—Ñ–æ–Ω',
                      prefixIcon: Icon(Icons.phone),
                    ),
                    keyboardType: TextInputType.phone,
                  ),
                  const SizedBox(height: 16.0),

                  // --- –ö–ù–û–ü–ö–ê –í–û–ô–¢–ò -----

                  CustomButton(
                      buttonText: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      onTapMethod: () async {
                        setState(() {
                          loading = true;
                        });

                        String name = nameController.text;
                        String lastName = lastNameController.text;
                        String phone = phoneController.text;

                        String? avatarUrl = "";

                        if (_imageFile != null){

                          final compressedImage = await imagePickerService.compressImage(_imageFile!);
                          avatarUrl = await ImageUploader.uploadImageInUser(widget.uid, compressedImage);

                        }

                        UserCustom userInfo = UserCustom(
                            uid: widget.uid,
                            email: widget.email,
                            name: name,
                            lastname: lastName,
                            phone: phone,
                            gender: '',
                            avatar: avatarUrl ?? defaultImage
                        );

                        String? result = await userInfo.publishToDb();

                        if (result == 'success') {

                          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                          showSnackBar(
                            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –î–∞–Ω–Ω—ã–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!",
                            Colors.green,
                            1,
                          );

                          // –£—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
                          navigateToProfile();

                        } else {
                          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                          showSnackBar(
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(",
                            AppColors.attentionRed,
                            1,
                          );
                        }

                        setState(() {
                          loading = false;
                        });

                      }
                  ),
                ],
              ),
            ),
          ],
        )
    );
  }

  void navigateToProfile() {

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ—á—Ç—É
    // –£—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    if (auth.currentUser != null && auth.currentUser!.emailVerified){
      Navigator.pushNamedAndRemoveUntil(
        context,
        '/Profile', // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤ MaterialApp
            (route) => false,
      );
      showSnackBar('–ü–∏–Ω–≥–≤–∏–Ω –≤–æ—à–µ–ª –≤ —Ö–æ–ª–ª. –ü–æ–≤—Ç–æ—Ä—è—é, –ø–∏–Ω–≥–≤–∏–Ω –≤–æ—à–µ–ª –≤ —Ö–æ–ª–ª! –í–∞—à –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –≥–µ—Ä–æ–π. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–µ—Å–µ–ª—å—é! üêßüåü', Colors.green, 2);
    } else {
      // –í–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–º - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã
      Navigator.pushNamedAndRemoveUntil(
        context,
        '/confirm_email', // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤ MaterialApp
            (route) => false,
      );

    }

  }
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é
  void showSnackBar(String message, Color color, int showTime) {
    final snackBar = customSnackBar(message: message, backgroundColor: color, showTime: showTime);
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  Future<void> _pickImage() async {
    final File? pickedImage = await imagePickerService.pickImage(ImageSource.gallery);

    if (pickedImage != null) {
      setState(() {
        _imageFile = pickedImage;
        imageController.text = _imageFile!.path;
      });
    }
  }

}