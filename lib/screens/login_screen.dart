import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:ip_planner_flutter/design/buttons/button_state.dart';
import 'package:ip_planner_flutter/design/buttons/custom_button.dart';
import 'package:ip_planner_flutter/design/loading/loading_screen.dart';
import 'package:ip_planner_flutter/design/text_widgets/text_custom.dart';
import 'package:ip_planner_flutter/design/text_widgets/text_state.dart';
import 'package:ip_planner_flutter/screens/reset_password_page.dart';
import '../design/app_colors.dart';
import '../design/snackBars/custom_snack_bar.dart';
import '../user/user_custom.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  LoginScreenState createState() => LoginScreenState();

}

class LoginScreenState extends State<LoginScreen> {

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è !! –ù–ï –£–î–ê–õ–Ø–¢–¨ !!!
  final FirebaseAuth auth = FirebaseAuth.instance;

  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  bool showForgotPasswordButton = false;
  bool showRegButton = true;
  bool userNotFound = false;

  bool loading = false;

  bool _isObscured = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Stack (
          children: [
            if (loading) const LoadingScreen()

            else SingleChildScrollView(
              padding: const EdgeInsets.fromLTRB(20, 50, 20, 50),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [

                  const SizedBox(height: 25.0),

                  const TextCustom(text: "–í—Ö–æ–¥", textState: TextState.headlineBig, color: AppColors.yellowLight,),

                  const SizedBox(height: 15.0),

                  const TextCustom(text: "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –°–∫—É—á–∞–ª–∏ –ø–æ —Ç–µ–±–µ! –í—Ö–æ–¥–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–ª—å–∑—É–π—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ! üöÄüòä", textState: TextState.bodyMedium),

                  const SizedBox(height: 25.0),

                  TextField(
                    style: const TextStyle(
                      color: AppColors.white,
                      fontSize: 16,
                      fontFamily: 'sf_custom',
                      fontWeight: FontWeight.normal,
                    ),
                    controller: emailController,
                    decoration: const InputDecoration(
                      labelText: 'Email',
                      prefixIcon: Icon(Icons.email),

                    ),
                    keyboardType: TextInputType.emailAddress,
                  ),
                  const SizedBox(height: 16.0),

                  // ---- –ü–û–õ–ï –ü–ê–†–û–õ–¨ -----

                  TextField(
                    style: const TextStyle(
                      color: AppColors.white,
                      fontSize: 16,
                      fontFamily: 'sf_custom',
                      fontWeight: FontWeight.normal,

                    ),
                    controller: passwordController,
                    decoration: InputDecoration(
                        prefixIcon: const Icon(Icons.key),
                        labelText: '–ü–∞—Ä–æ–ª—å',
                        suffixIcon: IconButton(
                          icon: Icon(
                            _isObscured ? Icons.visibility : Icons.visibility_off,
                          ),
                          onPressed: _togglePasswordVisibility,
                        )
                    ),
                    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å / —Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å
                    obscureText: _isObscured,
                  ),
                  const SizedBox(height: 16.0),

                  // --- –ö–ù–û–ü–ö–ê –í–û–ô–¢–ò -----

                  CustomButton(
                      buttonText: "–í–æ–π—Ç–∏",
                      onTapMethod: () async {
                        setState(() {
                          loading = true;
                        });

                        String email = emailController.text;
                        String password = passwordController.text;

                        String? uid = await UserCustom.signInWithEmailAndPassword(email, password, context);

                        if (uid != null) {
                          _reactOnUid(uid);
                        }
                      }
                  ),

                  const SizedBox(height: 50,),

                  if (showForgotPasswordButton) const SizedBox(height: 50.0),

                  if (showForgotPasswordButton) const TextCustom(
                      text: '–û–π, –ø–∞—Ä–æ–ª—å –∫—É–¥–∞-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª—Å—è? –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –º—ã —Ç–µ–±—è –Ω–µ –±—Ä–æ—Å–∏–º! –î–∞–≤–∞–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –¥–æ—Å—Ç—É–ø –≤ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç üöÄüîì',
                      textState: TextState.bodyMedium,
                  ),

                  if (showForgotPasswordButton) const SizedBox(height: 20.0),

                  if (showForgotPasswordButton) CustomButton(
                    state: ButtonState.secondary,
                    buttonText: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                    onTapMethod: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const ResetPasswordPage()),
                      );
                    },
                  ),

                  if (showRegButton) const TextCustom(text: "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?", textState: TextState.headlineSmall, color: AppColors.yellowLight,),

                  if (showRegButton) const SizedBox(height: 15.0),

                  if (showRegButton && userNotFound) Text(
                      '–û–π-–æ–π! –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º Email. –ú–æ–∂–µ—Ç –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç? üì©üîç',
                      style: Theme.of(context).textTheme.bodyMedium
                  ),

                  if (showRegButton && !userNotFound) const TextCustom(text: "–ù–µ –±–µ–¥–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å–µ–π—á–∞—Å –∏ –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. üöÄüòä", textState: TextState.bodyMedium),

                  if (showRegButton) const SizedBox(height: 15.0),

                  if (showRegButton) CustomButton(
                      buttonText: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                      state: ButtonState.secondary,
                      onTapMethod: () {
                        Navigator.pushNamedAndRemoveUntil(
                          context,
                          '/reg',
                              (route) => false,
                        );

                      }
                  ),

                  const SizedBox(height: 15.0),

                ],
              ),
            ),
          ],
        )
    );
  }

  void navigateToProfile() {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ—á—Ç—É
    // –£—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
    if (auth.currentUser != null && auth.currentUser!.emailVerified){
      Navigator.pushNamedAndRemoveUntil(
        context,
        '/Profile', // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤ MaterialApp
            (route) => false,
      );
      showSnackBar('–ü–∏–Ω–≥–≤–∏–Ω –≤–æ—à–µ–ª –≤ —Ö–æ–ª–ª. –ü–æ–≤—Ç–æ—Ä—è—é, –ø–∏–Ω–≥–≤–∏–Ω –≤–æ—à–µ–ª –≤ —Ö–æ–ª–ª! –í–∞—à –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –≥–µ—Ä–æ–π. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–µ—Å–µ–ª—å—é! üêßüåü', Colors.green, 2);
    } else {
      // –í–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–º - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã
      Navigator.pushNamedAndRemoveUntil(
        context,
        '/confirm_email', // –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤ MaterialApp
            (route) => false,
      );
    }
  }

  void showSnackBar(String message, Color color, int showTime) {
    final snackBar = customSnackBar(message: message, backgroundColor: color, showTime: showTime);
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?"
  void updateForgotPasswordButton(bool newValue) {
    setState(() {
      showForgotPasswordButton = newValue;
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "–ú–æ–∂–µ—Ç –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è?"
  void updateShowRegButton(bool newValue) {
    setState(() {
      showRegButton = newValue;
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–π / —Å–∫—Ä—ã–≤–∞—é—â–µ–π –ø–∞—Ä–æ–ª—å
  void _togglePasswordVisibility() {
    setState(() {
      _isObscured = !_isObscured;
    });
  }

  void _reactOnUid(String uid){

    if (uid == 'wrong-password') {

      setState(() {
        loading = false;
        userNotFound = false;
      });
      updateShowRegButton(false);
      updateForgotPasswordButton(true);
      showSnackBar('–£–ø—Å! –ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω( –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ ‚Äì –º—ã –≤–µ—Ä–∏–º –≤ —Ç–≤–æ—é –ø–∞–º—è—Ç—å! üîêüîÑ', AppColors.attentionRed, 2);

    } else if (uid == 'user-not-found') {

      setState(() {
        loading = false;
        userNotFound = true;
      });
      updateShowRegButton(true);
      updateForgotPasswordButton(false);
      showSnackBar('–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–π Email –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–µ—Ç, –æ–ø–µ—á–∞—Ç–∫–∞? –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–πc—è! üìßü§î', AppColors.attentionRed, 2);

    } else if (uid == 'too-many-requests') {

      setState(() {
        loading = false;
        userNotFound = false;
      });
      updateShowRegButton(false);
      updateForgotPasswordButton(false);
      showSnackBar('–û–π! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤—Ö–æ–¥ —Å —Ç–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîí‚è≥', AppColors.attentionRed, 2);

    } else if (uid == 'channel-error') {

      setState(() {
        loading = false;
        userNotFound = false;
      });
      updateShowRegButton(false);
      updateForgotPasswordButton(false);
      showSnackBar('–ß—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ! –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–µ—Å–µ–ª—å–µ.', AppColors.attentionRed, 2);

    } else if (uid == 'invalid-email') {

      setState(() {
        loading = false;
        userNotFound = false;
      });
      updateShowRegButton(false);
      updateForgotPasswordButton(false);
      showSnackBar('–û–π, —á—Ç–æ-—Ç–æ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º Email –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Å—è, —á—Ç–æ –≤–≤–æ–¥–∏—à—å –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏ –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑! üì≠üîÑ', AppColors.attentionRed, 2);

    } else {

      navigateToProfile();

      setState(() {
        loading = false;
        userNotFound = false;
      });

    }
  }

}